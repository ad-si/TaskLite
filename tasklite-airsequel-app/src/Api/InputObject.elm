-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql
module Api.InputObject exposing (..)


import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.SelectionSet exposing (SelectionSet)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Api.Object
import Api.Interface
import Api.Union
import Api.Scalar
import Api.ScalarCodecs
import Json.Decode as Decode
import Graphql.Internal.Encode as Encode exposing (Value)




buildBooleanComparison : (BooleanComparisonOptionalFields -> BooleanComparisonOptionalFields)
 -> BooleanComparison
buildBooleanComparison fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { lte = Absent, lt = Absent, gte = Absent, gt = Absent, neq = Absent, eq = Absent }
    in
    { lte = optionals____.lte, lt = optionals____.lt, gte = optionals____.gte, gt = optionals____.gt, neq = optionals____.neq, eq = optionals____.eq }


type alias BooleanComparisonOptionalFields =
    { lte : (OptionalArgument Bool)
 , lt : (OptionalArgument Bool)
 , gte : (OptionalArgument Bool)
 , gt : (OptionalArgument Bool)
 , neq : (OptionalArgument Bool)
 , eq : (OptionalArgument Bool) }


{-| Type for the BooleanComparison input object.
-}
type alias BooleanComparison =
    { lte : (OptionalArgument Bool)
 , lt : (OptionalArgument Bool)
 , gte : (OptionalArgument Bool)
 , gt : (OptionalArgument Bool)
 , neq : (OptionalArgument Bool)
 , eq : (OptionalArgument Bool) }
    

{-| Encode a BooleanComparison into a value that can be used as an argument.
-}
encodeBooleanComparison : BooleanComparison -> Value
encodeBooleanComparison input____ =
    Encode.maybeObject
        [ ( "lte", (Encode.bool)  |> Encode.optional input____.lte ), ( "lt", (Encode.bool)  |> Encode.optional input____.lt ), ( "gte", (Encode.bool)  |> Encode.optional input____.gte ), ( "gt", (Encode.bool)  |> Encode.optional input____.gt ), ( "neq", (Encode.bool)  |> Encode.optional input____.neq ), ( "eq", (Encode.bool)  |> Encode.optional input____.eq ) ]


buildFloatComparison : (FloatComparisonOptionalFields -> FloatComparisonOptionalFields)
 -> FloatComparison
buildFloatComparison fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { lte = Absent, lt = Absent, gte = Absent, gt = Absent, neq = Absent, eq = Absent }
    in
    { lte = optionals____.lte, lt = optionals____.lt, gte = optionals____.gte, gt = optionals____.gt, neq = optionals____.neq, eq = optionals____.eq }


type alias FloatComparisonOptionalFields =
    { lte : (OptionalArgument Float)
 , lt : (OptionalArgument Float)
 , gte : (OptionalArgument Float)
 , gt : (OptionalArgument Float)
 , neq : (OptionalArgument Float)
 , eq : (OptionalArgument Float) }


{-| Type for the FloatComparison input object.
-}
type alias FloatComparison =
    { lte : (OptionalArgument Float)
 , lt : (OptionalArgument Float)
 , gte : (OptionalArgument Float)
 , gt : (OptionalArgument Float)
 , neq : (OptionalArgument Float)
 , eq : (OptionalArgument Float) }
    

{-| Encode a FloatComparison into a value that can be used as an argument.
-}
encodeFloatComparison : FloatComparison -> Value
encodeFloatComparison input____ =
    Encode.maybeObject
        [ ( "lte", (Encode.float)  |> Encode.optional input____.lte ), ( "lt", (Encode.float)  |> Encode.optional input____.lt ), ( "gte", (Encode.float)  |> Encode.optional input____.gte ), ( "gt", (Encode.float)  |> Encode.optional input____.gt ), ( "neq", (Encode.float)  |> Encode.optional input____.neq ), ( "eq", (Encode.float)  |> Encode.optional input____.eq ) ]


buildIntComparison : (IntComparisonOptionalFields -> IntComparisonOptionalFields)
 -> IntComparison
buildIntComparison fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { lte = Absent, lt = Absent, gte = Absent, gt = Absent, neq = Absent, eq = Absent }
    in
    { lte = optionals____.lte, lt = optionals____.lt, gte = optionals____.gte, gt = optionals____.gt, neq = optionals____.neq, eq = optionals____.eq }


type alias IntComparisonOptionalFields =
    { lte : (OptionalArgument Int)
 , lt : (OptionalArgument Int)
 , gte : (OptionalArgument Int)
 , gt : (OptionalArgument Int)
 , neq : (OptionalArgument Int)
 , eq : (OptionalArgument Int) }


{-| Type for the IntComparison input object.
-}
type alias IntComparison =
    { lte : (OptionalArgument Int)
 , lt : (OptionalArgument Int)
 , gte : (OptionalArgument Int)
 , gt : (OptionalArgument Int)
 , neq : (OptionalArgument Int)
 , eq : (OptionalArgument Int) }
    

{-| Encode a IntComparison into a value that can be used as an argument.
-}
encodeIntComparison : IntComparison -> Value
encodeIntComparison input____ =
    Encode.maybeObject
        [ ( "lte", (Encode.int)  |> Encode.optional input____.lte ), ( "lt", (Encode.int)  |> Encode.optional input____.lt ), ( "gte", (Encode.int)  |> Encode.optional input____.gte ), ( "gt", (Encode.int)  |> Encode.optional input____.gt ), ( "neq", (Encode.int)  |> Encode.optional input____.neq ), ( "eq", (Encode.int)  |> Encode.optional input____.eq ) ]


buildStringComparison : (StringComparisonOptionalFields -> StringComparisonOptionalFields)
 -> StringComparison
buildStringComparison fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { lte = Absent, lt = Absent, gte = Absent, gt = Absent, neq = Absent, eq = Absent }
    in
    { lte = optionals____.lte, lt = optionals____.lt, gte = optionals____.gte, gt = optionals____.gt, neq = optionals____.neq, eq = optionals____.eq }


type alias StringComparisonOptionalFields =
    { lte : (OptionalArgument String)
 , lt : (OptionalArgument String)
 , gte : (OptionalArgument String)
 , gt : (OptionalArgument String)
 , neq : (OptionalArgument String)
 , eq : (OptionalArgument String) }


{-| Type for the StringComparison input object.
-}
type alias StringComparison =
    { lte : (OptionalArgument String)
 , lt : (OptionalArgument String)
 , gte : (OptionalArgument String)
 , gt : (OptionalArgument String)
 , neq : (OptionalArgument String)
 , eq : (OptionalArgument String) }
    

{-| Encode a StringComparison into a value that can be used as an argument.
-}
encodeStringComparison : StringComparison -> Value
encodeStringComparison input____ =
    Encode.maybeObject
        [ ( "lte", (Encode.string)  |> Encode.optional input____.lte ), ( "lt", (Encode.string)  |> Encode.optional input____.lt ), ( "gte", (Encode.string)  |> Encode.optional input____.gte ), ( "gt", (Encode.string)  |> Encode.optional input____.gt ), ( "neq", (Encode.string)  |> Encode.optional input____.neq ), ( "eq", (Encode.string)  |> Encode.optional input____.eq ) ]


buildTags_filter : (Tags_filterOptionalFields -> Tags_filterOptionalFields)
 -> Tags_filter
buildTags_filter fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { tag = Absent, open = Absent, closed = Absent, progress = Absent }
    in
    { tag = optionals____.tag, open = optionals____.open, closed = optionals____.closed, progress = optionals____.progress }


type alias Tags_filterOptionalFields =
    { tag : (OptionalArgument StringComparison)
 , open : (OptionalArgument StringComparison)
 , closed : (OptionalArgument StringComparison)
 , progress : (OptionalArgument StringComparison) }


{-| Type for the Tags_filter input object.
-}
type alias Tags_filter =
    { tag : (OptionalArgument StringComparison)
 , open : (OptionalArgument StringComparison)
 , closed : (OptionalArgument StringComparison)
 , progress : (OptionalArgument StringComparison) }
    

{-| Encode a Tags_filter into a value that can be used as an argument.
-}
encodeTags_filter : Tags_filter -> Value
encodeTags_filter input____ =
    Encode.maybeObject
        [ ( "tag", (encodeStringComparison)  |> Encode.optional input____.tag ), ( "open", (encodeStringComparison)  |> Encode.optional input____.open ), ( "closed", (encodeStringComparison)  |> Encode.optional input____.closed ), ( "progress", (encodeStringComparison)  |> Encode.optional input____.progress ) ]


buildTags_insert_input : (Tags_insert_inputOptionalFields -> Tags_insert_inputOptionalFields)
 -> Tags_insert_input
buildTags_insert_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { tag = Absent, open = Absent, closed = Absent, progress = Absent }
    in
    { tag = optionals____.tag, open = optionals____.open, closed = optionals____.closed, progress = optionals____.progress }


type alias Tags_insert_inputOptionalFields =
    { tag : (OptionalArgument String)
 , open : (OptionalArgument String)
 , closed : (OptionalArgument String)
 , progress : (OptionalArgument String) }


{-| Type for the Tags_insert_input input object.
-}
type alias Tags_insert_input =
    { tag : (OptionalArgument String)
 , open : (OptionalArgument String)
 , closed : (OptionalArgument String)
 , progress : (OptionalArgument String) }
    

{-| Encode a Tags_insert_input into a value that can be used as an argument.
-}
encodeTags_insert_input : Tags_insert_input -> Value
encodeTags_insert_input input____ =
    Encode.maybeObject
        [ ( "tag", (Encode.string)  |> Encode.optional input____.tag ), ( "open", (Encode.string)  |> Encode.optional input____.open ), ( "closed", (Encode.string)  |> Encode.optional input____.closed ), ( "progress", (Encode.string)  |> Encode.optional input____.progress ) ]


buildTags_set_input : (Tags_set_inputOptionalFields -> Tags_set_inputOptionalFields)
 -> Tags_set_input
buildTags_set_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { tag = Absent, open = Absent, closed = Absent, progress = Absent }
    in
    { tag = optionals____.tag, open = optionals____.open, closed = optionals____.closed, progress = optionals____.progress }


type alias Tags_set_inputOptionalFields =
    { tag : (OptionalArgument String)
 , open : (OptionalArgument String)
 , closed : (OptionalArgument String)
 , progress : (OptionalArgument String) }


{-| Type for the Tags_set_input input object.
-}
type alias Tags_set_input =
    { tag : (OptionalArgument String)
 , open : (OptionalArgument String)
 , closed : (OptionalArgument String)
 , progress : (OptionalArgument String) }
    

{-| Encode a Tags_set_input into a value that can be used as an argument.
-}
encodeTags_set_input : Tags_set_input -> Value
encodeTags_set_input input____ =
    Encode.maybeObject
        [ ( "tag", (Encode.string)  |> Encode.optional input____.tag ), ( "open", (Encode.string)  |> Encode.optional input____.open ), ( "closed", (Encode.string)  |> Encode.optional input____.closed ), ( "progress", (Encode.string)  |> Encode.optional input____.progress ) ]


buildTask_to_note_filter : (Task_to_note_filterOptionalFields -> Task_to_note_filterOptionalFields)
 -> Task_to_note_filter
buildTask_to_note_filter fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, ulid = Absent, task_ulid = Absent, note = Absent }
    in
    { rowid = optionals____.rowid, ulid = optionals____.ulid, task_ulid = optionals____.task_ulid, note = optionals____.note }


type alias Task_to_note_filterOptionalFields =
    { rowid : (OptionalArgument IntComparison)
 , ulid : (OptionalArgument StringComparison)
 , task_ulid : (OptionalArgument StringComparison)
 , note : (OptionalArgument StringComparison) }


{-| Type for the Task_to_note_filter input object.
-}
type alias Task_to_note_filter =
    { rowid : (OptionalArgument IntComparison)
 , ulid : (OptionalArgument StringComparison)
 , task_ulid : (OptionalArgument StringComparison)
 , note : (OptionalArgument StringComparison) }
    

{-| Encode a Task_to_note_filter into a value that can be used as an argument.
-}
encodeTask_to_note_filter : Task_to_note_filter -> Value
encodeTask_to_note_filter input____ =
    Encode.maybeObject
        [ ( "rowid", (encodeIntComparison)  |> Encode.optional input____.rowid ), ( "ulid", (encodeStringComparison)  |> Encode.optional input____.ulid ), ( "task_ulid", (encodeStringComparison)  |> Encode.optional input____.task_ulid ), ( "note", (encodeStringComparison)  |> Encode.optional input____.note ) ]


buildTask_to_note_insert_input : Task_to_note_insert_inputRequiredFields
 -> (Task_to_note_insert_inputOptionalFields -> Task_to_note_insert_inputOptionalFields)
 -> Task_to_note_insert_input
buildTask_to_note_insert_input required____ fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent }
    in
    { rowid = optionals____.rowid, ulid = required____.ulid, task_ulid = required____.task_ulid, note = required____.note }

type alias Task_to_note_insert_inputRequiredFields =
    { ulid : String
 , task_ulid : String
 , note : String }
type alias Task_to_note_insert_inputOptionalFields =
    { rowid : (OptionalArgument Int) }


{-| Type for the Task_to_note_insert_input input object.
-}
type alias Task_to_note_insert_input =
    { rowid : (OptionalArgument Int)
 , ulid : String
 , task_ulid : String
 , note : String }
    

{-| Encode a Task_to_note_insert_input into a value that can be used as an argument.
-}
encodeTask_to_note_insert_input : Task_to_note_insert_input -> Value
encodeTask_to_note_insert_input input____ =
    Encode.maybeObject
        [ ( "rowid", (Encode.int)  |> Encode.optional input____.rowid ), ( "ulid", (Encode.string)  input____.ulid |> Just ), ( "task_ulid", (Encode.string)  input____.task_ulid |> Just ), ( "note", (Encode.string)  input____.note |> Just ) ]


buildTask_to_note_set_input : (Task_to_note_set_inputOptionalFields -> Task_to_note_set_inputOptionalFields)
 -> Task_to_note_set_input
buildTask_to_note_set_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, ulid = Absent, task_ulid = Absent, note = Absent }
    in
    { rowid = optionals____.rowid, ulid = optionals____.ulid, task_ulid = optionals____.task_ulid, note = optionals____.note }


type alias Task_to_note_set_inputOptionalFields =
    { rowid : (OptionalArgument Int)
 , ulid : (OptionalArgument String)
 , task_ulid : (OptionalArgument String)
 , note : (OptionalArgument String) }


{-| Type for the Task_to_note_set_input input object.
-}
type alias Task_to_note_set_input =
    { rowid : (OptionalArgument Int)
 , ulid : (OptionalArgument String)
 , task_ulid : (OptionalArgument String)
 , note : (OptionalArgument String) }
    

{-| Encode a Task_to_note_set_input into a value that can be used as an argument.
-}
encodeTask_to_note_set_input : Task_to_note_set_input -> Value
encodeTask_to_note_set_input input____ =
    Encode.maybeObject
        [ ( "rowid", (Encode.int)  |> Encode.optional input____.rowid ), ( "ulid", (Encode.string)  |> Encode.optional input____.ulid ), ( "task_ulid", (Encode.string)  |> Encode.optional input____.task_ulid ), ( "note", (Encode.string)  |> Encode.optional input____.note ) ]


buildTask_to_tag_filter : (Task_to_tag_filterOptionalFields -> Task_to_tag_filterOptionalFields)
 -> Task_to_tag_filter
buildTask_to_tag_filter fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, ulid = Absent, task_ulid = Absent, tag = Absent }
    in
    { rowid = optionals____.rowid, ulid = optionals____.ulid, task_ulid = optionals____.task_ulid, tag = optionals____.tag }


type alias Task_to_tag_filterOptionalFields =
    { rowid : (OptionalArgument IntComparison)
 , ulid : (OptionalArgument StringComparison)
 , task_ulid : (OptionalArgument StringComparison)
 , tag : (OptionalArgument StringComparison) }


{-| Type for the Task_to_tag_filter input object.
-}
type alias Task_to_tag_filter =
    { rowid : (OptionalArgument IntComparison)
 , ulid : (OptionalArgument StringComparison)
 , task_ulid : (OptionalArgument StringComparison)
 , tag : (OptionalArgument StringComparison) }
    

{-| Encode a Task_to_tag_filter into a value that can be used as an argument.
-}
encodeTask_to_tag_filter : Task_to_tag_filter -> Value
encodeTask_to_tag_filter input____ =
    Encode.maybeObject
        [ ( "rowid", (encodeIntComparison)  |> Encode.optional input____.rowid ), ( "ulid", (encodeStringComparison)  |> Encode.optional input____.ulid ), ( "task_ulid", (encodeStringComparison)  |> Encode.optional input____.task_ulid ), ( "tag", (encodeStringComparison)  |> Encode.optional input____.tag ) ]


buildTask_to_tag_insert_input : Task_to_tag_insert_inputRequiredFields
 -> (Task_to_tag_insert_inputOptionalFields -> Task_to_tag_insert_inputOptionalFields)
 -> Task_to_tag_insert_input
buildTask_to_tag_insert_input required____ fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent }
    in
    { rowid = optionals____.rowid, ulid = required____.ulid, task_ulid = required____.task_ulid, tag = required____.tag }

type alias Task_to_tag_insert_inputRequiredFields =
    { ulid : String
 , task_ulid : String
 , tag : String }
type alias Task_to_tag_insert_inputOptionalFields =
    { rowid : (OptionalArgument Int) }


{-| Type for the Task_to_tag_insert_input input object.
-}
type alias Task_to_tag_insert_input =
    { rowid : (OptionalArgument Int)
 , ulid : String
 , task_ulid : String
 , tag : String }
    

{-| Encode a Task_to_tag_insert_input into a value that can be used as an argument.
-}
encodeTask_to_tag_insert_input : Task_to_tag_insert_input -> Value
encodeTask_to_tag_insert_input input____ =
    Encode.maybeObject
        [ ( "rowid", (Encode.int)  |> Encode.optional input____.rowid ), ( "ulid", (Encode.string)  input____.ulid |> Just ), ( "task_ulid", (Encode.string)  input____.task_ulid |> Just ), ( "tag", (Encode.string)  input____.tag |> Just ) ]


buildTask_to_tag_set_input : (Task_to_tag_set_inputOptionalFields -> Task_to_tag_set_inputOptionalFields)
 -> Task_to_tag_set_input
buildTask_to_tag_set_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, ulid = Absent, task_ulid = Absent, tag = Absent }
    in
    { rowid = optionals____.rowid, ulid = optionals____.ulid, task_ulid = optionals____.task_ulid, tag = optionals____.tag }


type alias Task_to_tag_set_inputOptionalFields =
    { rowid : (OptionalArgument Int)
 , ulid : (OptionalArgument String)
 , task_ulid : (OptionalArgument String)
 , tag : (OptionalArgument String) }


{-| Type for the Task_to_tag_set_input input object.
-}
type alias Task_to_tag_set_input =
    { rowid : (OptionalArgument Int)
 , ulid : (OptionalArgument String)
 , task_ulid : (OptionalArgument String)
 , tag : (OptionalArgument String) }
    

{-| Encode a Task_to_tag_set_input into a value that can be used as an argument.
-}
encodeTask_to_tag_set_input : Task_to_tag_set_input -> Value
encodeTask_to_tag_set_input input____ =
    Encode.maybeObject
        [ ( "rowid", (Encode.int)  |> Encode.optional input____.rowid ), ( "ulid", (Encode.string)  |> Encode.optional input____.ulid ), ( "task_ulid", (Encode.string)  |> Encode.optional input____.task_ulid ), ( "tag", (Encode.string)  |> Encode.optional input____.tag ) ]


buildTasks_filter : (Tasks_filterOptionalFields -> Tasks_filterOptionalFields)
 -> Tasks_filter
buildTasks_filter fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, ulid = Absent, body = Absent, modified_utc = Absent, awake_utc = Absent, ready_utc = Absent, waiting_utc = Absent, review_utc = Absent, due_utc = Absent, closed_utc = Absent, state = Absent, group_ulid = Absent, repetition_duration = Absent, recurrence_duration = Absent, priority_adjustment = Absent, user = Absent, metadata = Absent }
    in
    { rowid = optionals____.rowid, ulid = optionals____.ulid, body = optionals____.body, modified_utc = optionals____.modified_utc, awake_utc = optionals____.awake_utc, ready_utc = optionals____.ready_utc, waiting_utc = optionals____.waiting_utc, review_utc = optionals____.review_utc, due_utc = optionals____.due_utc, closed_utc = optionals____.closed_utc, state = optionals____.state, group_ulid = optionals____.group_ulid, repetition_duration = optionals____.repetition_duration, recurrence_duration = optionals____.recurrence_duration, priority_adjustment = optionals____.priority_adjustment, user = optionals____.user, metadata = optionals____.metadata }


type alias Tasks_filterOptionalFields =
    { rowid : (OptionalArgument IntComparison)
 , ulid : (OptionalArgument StringComparison)
 , body : (OptionalArgument StringComparison)
 , modified_utc : (OptionalArgument StringComparison)
 , awake_utc : (OptionalArgument StringComparison)
 , ready_utc : (OptionalArgument StringComparison)
 , waiting_utc : (OptionalArgument StringComparison)
 , review_utc : (OptionalArgument StringComparison)
 , due_utc : (OptionalArgument StringComparison)
 , closed_utc : (OptionalArgument StringComparison)
 , state : (OptionalArgument StringComparison)
 , group_ulid : (OptionalArgument StringComparison)
 , repetition_duration : (OptionalArgument StringComparison)
 , recurrence_duration : (OptionalArgument StringComparison)
 , priority_adjustment : (OptionalArgument FloatComparison)
 , user : (OptionalArgument StringComparison)
 , metadata : (OptionalArgument StringComparison) }


{-| Type for the Tasks_filter input object.
-}
type alias Tasks_filter =
    { rowid : (OptionalArgument IntComparison)
 , ulid : (OptionalArgument StringComparison)
 , body : (OptionalArgument StringComparison)
 , modified_utc : (OptionalArgument StringComparison)
 , awake_utc : (OptionalArgument StringComparison)
 , ready_utc : (OptionalArgument StringComparison)
 , waiting_utc : (OptionalArgument StringComparison)
 , review_utc : (OptionalArgument StringComparison)
 , due_utc : (OptionalArgument StringComparison)
 , closed_utc : (OptionalArgument StringComparison)
 , state : (OptionalArgument StringComparison)
 , group_ulid : (OptionalArgument StringComparison)
 , repetition_duration : (OptionalArgument StringComparison)
 , recurrence_duration : (OptionalArgument StringComparison)
 , priority_adjustment : (OptionalArgument FloatComparison)
 , user : (OptionalArgument StringComparison)
 , metadata : (OptionalArgument StringComparison) }
    

{-| Encode a Tasks_filter into a value that can be used as an argument.
-}
encodeTasks_filter : Tasks_filter -> Value
encodeTasks_filter input____ =
    Encode.maybeObject
        [ ( "rowid", (encodeIntComparison)  |> Encode.optional input____.rowid ), ( "ulid", (encodeStringComparison)  |> Encode.optional input____.ulid ), ( "body", (encodeStringComparison)  |> Encode.optional input____.body ), ( "modified_utc", (encodeStringComparison)  |> Encode.optional input____.modified_utc ), ( "awake_utc", (encodeStringComparison)  |> Encode.optional input____.awake_utc ), ( "ready_utc", (encodeStringComparison)  |> Encode.optional input____.ready_utc ), ( "waiting_utc", (encodeStringComparison)  |> Encode.optional input____.waiting_utc ), ( "review_utc", (encodeStringComparison)  |> Encode.optional input____.review_utc ), ( "due_utc", (encodeStringComparison)  |> Encode.optional input____.due_utc ), ( "closed_utc", (encodeStringComparison)  |> Encode.optional input____.closed_utc ), ( "state", (encodeStringComparison)  |> Encode.optional input____.state ), ( "group_ulid", (encodeStringComparison)  |> Encode.optional input____.group_ulid ), ( "repetition_duration", (encodeStringComparison)  |> Encode.optional input____.repetition_duration ), ( "recurrence_duration", (encodeStringComparison)  |> Encode.optional input____.recurrence_duration ), ( "priority_adjustment", (encodeFloatComparison)  |> Encode.optional input____.priority_adjustment ), ( "user", (encodeStringComparison)  |> Encode.optional input____.user ), ( "metadata", (encodeStringComparison)  |> Encode.optional input____.metadata ) ]


buildTasks_insert_input : Tasks_insert_inputRequiredFields
 -> (Tasks_insert_inputOptionalFields -> Tasks_insert_inputOptionalFields)
 -> Tasks_insert_input
buildTasks_insert_input required____ fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, awake_utc = Absent, ready_utc = Absent, waiting_utc = Absent, review_utc = Absent, due_utc = Absent, closed_utc = Absent, state = Absent, group_ulid = Absent, repetition_duration = Absent, recurrence_duration = Absent, priority_adjustment = Absent, user = Absent, metadata = Absent }
    in
    { rowid = optionals____.rowid, ulid = required____.ulid, body = required____.body, modified_utc = required____.modified_utc, awake_utc = optionals____.awake_utc, ready_utc = optionals____.ready_utc, waiting_utc = optionals____.waiting_utc, review_utc = optionals____.review_utc, due_utc = optionals____.due_utc, closed_utc = optionals____.closed_utc, state = optionals____.state, group_ulid = optionals____.group_ulid, repetition_duration = optionals____.repetition_duration, recurrence_duration = optionals____.recurrence_duration, priority_adjustment = optionals____.priority_adjustment, user = optionals____.user, metadata = optionals____.metadata }

type alias Tasks_insert_inputRequiredFields =
    { ulid : String
 , body : String
 , modified_utc : String }
type alias Tasks_insert_inputOptionalFields =
    { rowid : (OptionalArgument Int)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , priority_adjustment : (OptionalArgument Float)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }


{-| Type for the Tasks_insert_input input object.
-}
type alias Tasks_insert_input =
    { rowid : (OptionalArgument Int)
 , ulid : String
 , body : String
 , modified_utc : String
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , priority_adjustment : (OptionalArgument Float)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }
    

{-| Encode a Tasks_insert_input into a value that can be used as an argument.
-}
encodeTasks_insert_input : Tasks_insert_input -> Value
encodeTasks_insert_input input____ =
    Encode.maybeObject
        [ ( "rowid", (Encode.int)  |> Encode.optional input____.rowid ), ( "ulid", (Encode.string)  input____.ulid |> Just ), ( "body", (Encode.string)  input____.body |> Just ), ( "modified_utc", (Encode.string)  input____.modified_utc |> Just ), ( "awake_utc", (Encode.string)  |> Encode.optional input____.awake_utc ), ( "ready_utc", (Encode.string)  |> Encode.optional input____.ready_utc ), ( "waiting_utc", (Encode.string)  |> Encode.optional input____.waiting_utc ), ( "review_utc", (Encode.string)  |> Encode.optional input____.review_utc ), ( "due_utc", (Encode.string)  |> Encode.optional input____.due_utc ), ( "closed_utc", (Encode.string)  |> Encode.optional input____.closed_utc ), ( "state", (Encode.string)  |> Encode.optional input____.state ), ( "group_ulid", (Encode.string)  |> Encode.optional input____.group_ulid ), ( "repetition_duration", (Encode.string)  |> Encode.optional input____.repetition_duration ), ( "recurrence_duration", (Encode.string)  |> Encode.optional input____.recurrence_duration ), ( "priority_adjustment", (Encode.float)  |> Encode.optional input____.priority_adjustment ), ( "user", (Encode.string)  |> Encode.optional input____.user ), ( "metadata", (Encode.string)  |> Encode.optional input____.metadata ) ]


buildTasks_set_input : (Tasks_set_inputOptionalFields -> Tasks_set_inputOptionalFields)
 -> Tasks_set_input
buildTasks_set_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { rowid = Absent, ulid = Absent, body = Absent, modified_utc = Absent, awake_utc = Absent, ready_utc = Absent, waiting_utc = Absent, review_utc = Absent, due_utc = Absent, closed_utc = Absent, state = Absent, group_ulid = Absent, repetition_duration = Absent, recurrence_duration = Absent, priority_adjustment = Absent, user = Absent, metadata = Absent }
    in
    { rowid = optionals____.rowid, ulid = optionals____.ulid, body = optionals____.body, modified_utc = optionals____.modified_utc, awake_utc = optionals____.awake_utc, ready_utc = optionals____.ready_utc, waiting_utc = optionals____.waiting_utc, review_utc = optionals____.review_utc, due_utc = optionals____.due_utc, closed_utc = optionals____.closed_utc, state = optionals____.state, group_ulid = optionals____.group_ulid, repetition_duration = optionals____.repetition_duration, recurrence_duration = optionals____.recurrence_duration, priority_adjustment = optionals____.priority_adjustment, user = optionals____.user, metadata = optionals____.metadata }


type alias Tasks_set_inputOptionalFields =
    { rowid : (OptionalArgument Int)
 , ulid : (OptionalArgument String)
 , body : (OptionalArgument String)
 , modified_utc : (OptionalArgument String)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , priority_adjustment : (OptionalArgument Float)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }


{-| Type for the Tasks_set_input input object.
-}
type alias Tasks_set_input =
    { rowid : (OptionalArgument Int)
 , ulid : (OptionalArgument String)
 , body : (OptionalArgument String)
 , modified_utc : (OptionalArgument String)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , priority_adjustment : (OptionalArgument Float)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }
    

{-| Encode a Tasks_set_input into a value that can be used as an argument.
-}
encodeTasks_set_input : Tasks_set_input -> Value
encodeTasks_set_input input____ =
    Encode.maybeObject
        [ ( "rowid", (Encode.int)  |> Encode.optional input____.rowid ), ( "ulid", (Encode.string)  |> Encode.optional input____.ulid ), ( "body", (Encode.string)  |> Encode.optional input____.body ), ( "modified_utc", (Encode.string)  |> Encode.optional input____.modified_utc ), ( "awake_utc", (Encode.string)  |> Encode.optional input____.awake_utc ), ( "ready_utc", (Encode.string)  |> Encode.optional input____.ready_utc ), ( "waiting_utc", (Encode.string)  |> Encode.optional input____.waiting_utc ), ( "review_utc", (Encode.string)  |> Encode.optional input____.review_utc ), ( "due_utc", (Encode.string)  |> Encode.optional input____.due_utc ), ( "closed_utc", (Encode.string)  |> Encode.optional input____.closed_utc ), ( "state", (Encode.string)  |> Encode.optional input____.state ), ( "group_ulid", (Encode.string)  |> Encode.optional input____.group_ulid ), ( "repetition_duration", (Encode.string)  |> Encode.optional input____.repetition_duration ), ( "recurrence_duration", (Encode.string)  |> Encode.optional input____.recurrence_duration ), ( "priority_adjustment", (Encode.float)  |> Encode.optional input____.priority_adjustment ), ( "user", (Encode.string)  |> Encode.optional input____.user ), ( "metadata", (Encode.string)  |> Encode.optional input____.metadata ) ]


buildTasks_view_filter : (Tasks_view_filterOptionalFields -> Tasks_view_filterOptionalFields)
 -> Tasks_view_filter
buildTasks_view_filter fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { ulid = Absent, body = Absent, modified_utc = Absent, awake_utc = Absent, ready_utc = Absent, waiting_utc = Absent, review_utc = Absent, due_utc = Absent, closed_utc = Absent, state = Absent, group_ulid = Absent, repetition_duration = Absent, recurrence_duration = Absent, tags = Absent, notes = Absent, priority = Absent, user = Absent, metadata = Absent }
    in
    { ulid = optionals____.ulid, body = optionals____.body, modified_utc = optionals____.modified_utc, awake_utc = optionals____.awake_utc, ready_utc = optionals____.ready_utc, waiting_utc = optionals____.waiting_utc, review_utc = optionals____.review_utc, due_utc = optionals____.due_utc, closed_utc = optionals____.closed_utc, state = optionals____.state, group_ulid = optionals____.group_ulid, repetition_duration = optionals____.repetition_duration, recurrence_duration = optionals____.recurrence_duration, tags = optionals____.tags, notes = optionals____.notes, priority = optionals____.priority, user = optionals____.user, metadata = optionals____.metadata }


type alias Tasks_view_filterOptionalFields =
    { ulid : (OptionalArgument StringComparison)
 , body : (OptionalArgument StringComparison)
 , modified_utc : (OptionalArgument StringComparison)
 , awake_utc : (OptionalArgument StringComparison)
 , ready_utc : (OptionalArgument StringComparison)
 , waiting_utc : (OptionalArgument StringComparison)
 , review_utc : (OptionalArgument StringComparison)
 , due_utc : (OptionalArgument StringComparison)
 , closed_utc : (OptionalArgument StringComparison)
 , state : (OptionalArgument StringComparison)
 , group_ulid : (OptionalArgument StringComparison)
 , repetition_duration : (OptionalArgument StringComparison)
 , recurrence_duration : (OptionalArgument StringComparison)
 , tags : (OptionalArgument StringComparison)
 , notes : (OptionalArgument StringComparison)
 , priority : (OptionalArgument StringComparison)
 , user : (OptionalArgument StringComparison)
 , metadata : (OptionalArgument StringComparison) }


{-| Type for the Tasks_view_filter input object.
-}
type alias Tasks_view_filter =
    { ulid : (OptionalArgument StringComparison)
 , body : (OptionalArgument StringComparison)
 , modified_utc : (OptionalArgument StringComparison)
 , awake_utc : (OptionalArgument StringComparison)
 , ready_utc : (OptionalArgument StringComparison)
 , waiting_utc : (OptionalArgument StringComparison)
 , review_utc : (OptionalArgument StringComparison)
 , due_utc : (OptionalArgument StringComparison)
 , closed_utc : (OptionalArgument StringComparison)
 , state : (OptionalArgument StringComparison)
 , group_ulid : (OptionalArgument StringComparison)
 , repetition_duration : (OptionalArgument StringComparison)
 , recurrence_duration : (OptionalArgument StringComparison)
 , tags : (OptionalArgument StringComparison)
 , notes : (OptionalArgument StringComparison)
 , priority : (OptionalArgument StringComparison)
 , user : (OptionalArgument StringComparison)
 , metadata : (OptionalArgument StringComparison) }
    

{-| Encode a Tasks_view_filter into a value that can be used as an argument.
-}
encodeTasks_view_filter : Tasks_view_filter -> Value
encodeTasks_view_filter input____ =
    Encode.maybeObject
        [ ( "ulid", (encodeStringComparison)  |> Encode.optional input____.ulid ), ( "body", (encodeStringComparison)  |> Encode.optional input____.body ), ( "modified_utc", (encodeStringComparison)  |> Encode.optional input____.modified_utc ), ( "awake_utc", (encodeStringComparison)  |> Encode.optional input____.awake_utc ), ( "ready_utc", (encodeStringComparison)  |> Encode.optional input____.ready_utc ), ( "waiting_utc", (encodeStringComparison)  |> Encode.optional input____.waiting_utc ), ( "review_utc", (encodeStringComparison)  |> Encode.optional input____.review_utc ), ( "due_utc", (encodeStringComparison)  |> Encode.optional input____.due_utc ), ( "closed_utc", (encodeStringComparison)  |> Encode.optional input____.closed_utc ), ( "state", (encodeStringComparison)  |> Encode.optional input____.state ), ( "group_ulid", (encodeStringComparison)  |> Encode.optional input____.group_ulid ), ( "repetition_duration", (encodeStringComparison)  |> Encode.optional input____.repetition_duration ), ( "recurrence_duration", (encodeStringComparison)  |> Encode.optional input____.recurrence_duration ), ( "tags", (encodeStringComparison)  |> Encode.optional input____.tags ), ( "notes", (encodeStringComparison)  |> Encode.optional input____.notes ), ( "priority", (encodeStringComparison)  |> Encode.optional input____.priority ), ( "user", (encodeStringComparison)  |> Encode.optional input____.user ), ( "metadata", (encodeStringComparison)  |> Encode.optional input____.metadata ) ]


buildTasks_view_insert_input : (Tasks_view_insert_inputOptionalFields -> Tasks_view_insert_inputOptionalFields)
 -> Tasks_view_insert_input
buildTasks_view_insert_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { ulid = Absent, body = Absent, modified_utc = Absent, awake_utc = Absent, ready_utc = Absent, waiting_utc = Absent, review_utc = Absent, due_utc = Absent, closed_utc = Absent, state = Absent, group_ulid = Absent, repetition_duration = Absent, recurrence_duration = Absent, tags = Absent, notes = Absent, priority = Absent, user = Absent, metadata = Absent }
    in
    { ulid = optionals____.ulid, body = optionals____.body, modified_utc = optionals____.modified_utc, awake_utc = optionals____.awake_utc, ready_utc = optionals____.ready_utc, waiting_utc = optionals____.waiting_utc, review_utc = optionals____.review_utc, due_utc = optionals____.due_utc, closed_utc = optionals____.closed_utc, state = optionals____.state, group_ulid = optionals____.group_ulid, repetition_duration = optionals____.repetition_duration, recurrence_duration = optionals____.recurrence_duration, tags = optionals____.tags, notes = optionals____.notes, priority = optionals____.priority, user = optionals____.user, metadata = optionals____.metadata }


type alias Tasks_view_insert_inputOptionalFields =
    { ulid : (OptionalArgument String)
 , body : (OptionalArgument String)
 , modified_utc : (OptionalArgument String)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , tags : (OptionalArgument String)
 , notes : (OptionalArgument String)
 , priority : (OptionalArgument String)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }


{-| Type for the Tasks_view_insert_input input object.
-}
type alias Tasks_view_insert_input =
    { ulid : (OptionalArgument String)
 , body : (OptionalArgument String)
 , modified_utc : (OptionalArgument String)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , tags : (OptionalArgument String)
 , notes : (OptionalArgument String)
 , priority : (OptionalArgument String)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }
    

{-| Encode a Tasks_view_insert_input into a value that can be used as an argument.
-}
encodeTasks_view_insert_input : Tasks_view_insert_input -> Value
encodeTasks_view_insert_input input____ =
    Encode.maybeObject
        [ ( "ulid", (Encode.string)  |> Encode.optional input____.ulid ), ( "body", (Encode.string)  |> Encode.optional input____.body ), ( "modified_utc", (Encode.string)  |> Encode.optional input____.modified_utc ), ( "awake_utc", (Encode.string)  |> Encode.optional input____.awake_utc ), ( "ready_utc", (Encode.string)  |> Encode.optional input____.ready_utc ), ( "waiting_utc", (Encode.string)  |> Encode.optional input____.waiting_utc ), ( "review_utc", (Encode.string)  |> Encode.optional input____.review_utc ), ( "due_utc", (Encode.string)  |> Encode.optional input____.due_utc ), ( "closed_utc", (Encode.string)  |> Encode.optional input____.closed_utc ), ( "state", (Encode.string)  |> Encode.optional input____.state ), ( "group_ulid", (Encode.string)  |> Encode.optional input____.group_ulid ), ( "repetition_duration", (Encode.string)  |> Encode.optional input____.repetition_duration ), ( "recurrence_duration", (Encode.string)  |> Encode.optional input____.recurrence_duration ), ( "tags", (Encode.string)  |> Encode.optional input____.tags ), ( "notes", (Encode.string)  |> Encode.optional input____.notes ), ( "priority", (Encode.string)  |> Encode.optional input____.priority ), ( "user", (Encode.string)  |> Encode.optional input____.user ), ( "metadata", (Encode.string)  |> Encode.optional input____.metadata ) ]


buildTasks_view_set_input : (Tasks_view_set_inputOptionalFields -> Tasks_view_set_inputOptionalFields)
 -> Tasks_view_set_input
buildTasks_view_set_input fillOptionals____ =

    let
        optionals____ =
            
            fillOptionals____
                { ulid = Absent, body = Absent, modified_utc = Absent, awake_utc = Absent, ready_utc = Absent, waiting_utc = Absent, review_utc = Absent, due_utc = Absent, closed_utc = Absent, state = Absent, group_ulid = Absent, repetition_duration = Absent, recurrence_duration = Absent, tags = Absent, notes = Absent, priority = Absent, user = Absent, metadata = Absent }
    in
    { ulid = optionals____.ulid, body = optionals____.body, modified_utc = optionals____.modified_utc, awake_utc = optionals____.awake_utc, ready_utc = optionals____.ready_utc, waiting_utc = optionals____.waiting_utc, review_utc = optionals____.review_utc, due_utc = optionals____.due_utc, closed_utc = optionals____.closed_utc, state = optionals____.state, group_ulid = optionals____.group_ulid, repetition_duration = optionals____.repetition_duration, recurrence_duration = optionals____.recurrence_duration, tags = optionals____.tags, notes = optionals____.notes, priority = optionals____.priority, user = optionals____.user, metadata = optionals____.metadata }


type alias Tasks_view_set_inputOptionalFields =
    { ulid : (OptionalArgument String)
 , body : (OptionalArgument String)
 , modified_utc : (OptionalArgument String)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , tags : (OptionalArgument String)
 , notes : (OptionalArgument String)
 , priority : (OptionalArgument String)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }


{-| Type for the Tasks_view_set_input input object.
-}
type alias Tasks_view_set_input =
    { ulid : (OptionalArgument String)
 , body : (OptionalArgument String)
 , modified_utc : (OptionalArgument String)
 , awake_utc : (OptionalArgument String)
 , ready_utc : (OptionalArgument String)
 , waiting_utc : (OptionalArgument String)
 , review_utc : (OptionalArgument String)
 , due_utc : (OptionalArgument String)
 , closed_utc : (OptionalArgument String)
 , state : (OptionalArgument String)
 , group_ulid : (OptionalArgument String)
 , repetition_duration : (OptionalArgument String)
 , recurrence_duration : (OptionalArgument String)
 , tags : (OptionalArgument String)
 , notes : (OptionalArgument String)
 , priority : (OptionalArgument String)
 , user : (OptionalArgument String)
 , metadata : (OptionalArgument String) }
    

{-| Encode a Tasks_view_set_input into a value that can be used as an argument.
-}
encodeTasks_view_set_input : Tasks_view_set_input -> Value
encodeTasks_view_set_input input____ =
    Encode.maybeObject
        [ ( "ulid", (Encode.string)  |> Encode.optional input____.ulid ), ( "body", (Encode.string)  |> Encode.optional input____.body ), ( "modified_utc", (Encode.string)  |> Encode.optional input____.modified_utc ), ( "awake_utc", (Encode.string)  |> Encode.optional input____.awake_utc ), ( "ready_utc", (Encode.string)  |> Encode.optional input____.ready_utc ), ( "waiting_utc", (Encode.string)  |> Encode.optional input____.waiting_utc ), ( "review_utc", (Encode.string)  |> Encode.optional input____.review_utc ), ( "due_utc", (Encode.string)  |> Encode.optional input____.due_utc ), ( "closed_utc", (Encode.string)  |> Encode.optional input____.closed_utc ), ( "state", (Encode.string)  |> Encode.optional input____.state ), ( "group_ulid", (Encode.string)  |> Encode.optional input____.group_ulid ), ( "repetition_duration", (Encode.string)  |> Encode.optional input____.repetition_duration ), ( "recurrence_duration", (Encode.string)  |> Encode.optional input____.recurrence_duration ), ( "tags", (Encode.string)  |> Encode.optional input____.tags ), ( "notes", (Encode.string)  |> Encode.optional input____.notes ), ( "priority", (Encode.string)  |> Encode.optional input____.priority ), ( "user", (Encode.string)  |> Encode.optional input____.user ), ( "metadata", (Encode.string)  |> Encode.optional input____.metadata ) ]
